{"version":3,"sources":["www"],"names":[],"mappings":";;;;;;;;AAMA,IAAI,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;AAC3B,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,CAAA;AAC5C,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;;;;;;AAM1B,IAAI,IAAI,GAAG,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC,CAAA;AACpD,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;;;;;;AAMrB,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA;;;;;;AAMnC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;AACnB,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;AAC3B,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,CAAA;;;;;;AAMnC,SAAS,aAAa,CAAC,GAAG,EAAE;AAC1B,MAAI,IAAI,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAA;;AAE5B,MAAI,KAAK,CAAC,IAAI,CAAC,EAAE;;AAEf,WAAO,GAAG,CAAA;GACX;;AAED,MAAI,IAAI,IAAI,CAAC,EAAE;;AAEb,WAAO,IAAI,CAAA;GACZ;;AAED,SAAO,KAAK,CAAA;CACb;;;;;;AAMD,SAAS,OAAO,CAAC,KAAK,EAAE;AACtB,MAAI,KAAK,CAAC,OAAO,KAAK,QAAQ,EAAE;AAC9B,UAAM,KAAK,CAAA;GACZ;;AAED,MAAI,IAAI,GAAG,OAAO,IAAI,KAAK,QAAQ,GAC/B,OAAO,GAAG,IAAI,GACd,OAAO,GAAG,IAAI,CAAA;;;AAGlB,UAAQ,KAAK,CAAC,IAAI;AAChB,SAAK,QAAQ;AACX,aAAO,CAAC,KAAK,CAAC,IAAI,GAAG,+BAA+B,CAAC,CAAA;AACrD,aAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACf,YAAK;AAAA,AACP,SAAK,YAAY;AACf,aAAO,CAAC,KAAK,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAA;AAC1C,aAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACf,YAAK;AAAA,AACP;AACE,YAAM,KAAK,CAAA;AAAA,GACd;CACF;;;;;;AAMD,SAAS,WAAW,GAAG;AACrB,MAAI,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAA;AAC3B,MAAI,IAAI,GAAG,OAAO,IAAI,KAAK,QAAQ,GAC/B,OAAO,GAAG,IAAI,GACd,OAAO,GAAG,IAAI,CAAC,IAAI,CAAA;AACvB,OAAK,CAAC,eAAe,GAAG,IAAI,CAAC,CAAA;CAC9B","file":"www-compiled.js","sourcesContent":["#!/usr/local/bin/node\n\n/**\n * Module dependencies.\n */\n\nlet app = require('../app')\nlet debug = require('debug')('week1:server')\nlet http = require('http')\n\n/**\n * Get port from environment and store in Express.\n */\n\nlet port = normalizePort(process.env.PORT || '3000')\napp.set('port', port)\n\n/**\n * Create HTTP server.\n */\n\nlet server = http.createServer(app)\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port)\nserver.on('error', onError)\nserver.on('listening', onListening)\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  let port = parseInt(val, 10)\n\n  if (isNaN(port)) {\n    // named pipe\n    return val\n  }\n\n  if (port >= 0) {\n    // port number\n    return port\n  }\n\n  return false\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error\n  }\n\n  let bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges')\n      process.exit(1)\n      break\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use')\n      process.exit(1)\n      break\n    default:\n      throw error\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  let addr = server.address()\n  let bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port\n  debug('Listening on ' + bind)\n}\n"]}